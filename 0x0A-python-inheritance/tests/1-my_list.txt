The ``1-my_list`` module
============================

Using ``1-mylist``
---------------------

Import function from module:
    >>> MyList = __import__('1-my_list').MyList

Normal List Sorting Test:
    >>> l = MyList([2, 10, 5])
    >>> l.print_sorted()
    [2, 5, 10]

Complex List Sorting Test:
    >>> l = MyList([6, 4, 8, 2, 7])
    >>> l.print_sorted()
    [2, 4, 6, 7, 8]

Negative Integers Sorting Test:
    >>> l = MyList([-500, -100, -300])
    >>> l.print_sorted()
    [-500, -300, -100]

Empty List Sorting Test:
    >>> l = MyList()
    >>> l.print_sorted()
    []

Class Type Validation:
    >>> l = MyList()
    >>> type(l) == MyList
    True

Instance Type Validation:
    >>> l = MyList()
    >>> isinstance(l, list)
    True

print_sorted Method Type Validation:
    >>> type(MyList.__dict__['print_sorted'])
    <class 'function'>

Original List Unchanged Test:
    >>> l = MyList([3, 9, 5, 1])
    >>> l.print_sorted()
    [1, 3, 5, 9]
    >>> l
    [3, 9, 5, 1]

Already Sorted List Test:
    >>> l = MyList([-8, 0, 2, 6, 9])
    >>> l.print_sorted()
    [-8, 0, 2, 6, 9]

Append Method Test:
    >>> l = MyList()
    >>> l.append(15)
    >>> l
    [15]
    
print_sorted Method Call Without Args:
    >>> l.__class__.print_sorted()
    Traceback (most recent call last):
    TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted Method Call With 1 Argument (Incorrect Usage):
    >>> l.print_sorted([9, 7, 3])
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted Method Call With 2 Argument (Incorrect Usage):
    >>> l.print_sorted([9, 7, 3], 1)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 3 were given
