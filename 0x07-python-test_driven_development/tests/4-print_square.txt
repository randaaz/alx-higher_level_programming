The ``4-print_square`` module
============================

Using ``print_square``
---------------------

Import module:
    >>> print_square = __import__('4-print_square').print_square

Test printing a square of size 9:
    >>> print_square(9)
    #########
    #########
    #########
    #########
    #########
    #########
    #########
    #########
    #########

Test printing an empty square:
    >>> print_square(0)

Test printing a square of size 3:
    >>> print_square(3)
    ###
    ###
    ###

Test printing a square of size 1:
    >>> print_square(1)
    #

Test printing a square of size 2:
    >>> print_square(2)
    ##
    ##

Test printing a square with a negative size:
    >>> print_square(-2)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

Test printing a square with missing size argument:
    >>> print_square()
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'
    
Test printing a square with a float size:
    >>> print_square(5.0)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test printing a square with a str:
    >>> print_square("hello")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test printing a square with None as size:
    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test printing a square with positive infinity as size:
    >>> print_square(float('inf'))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

Test printing a square with NaN as size:
    >>> print_square(float('nan'))
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer
